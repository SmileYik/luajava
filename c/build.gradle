plugins {
    id 'c'
}

group = 'org.keplerproject'
version = '1.0-SNAPSHOT'

def IS_WINDOWS = System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("win")
def IS_MACOS = System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("mac")

repositories {
    mavenCentral()
}

model {
    platforms {
        x86 {
            architecture "x86"
        }
        x64 {
            architecture "x86_64"
        }
    }
}

model {
    components {
        luajit(NativeLibrarySpec) {
            targetPlatform 'x64'
            sources {
                c {
                    exportedHeaders {
                        srcDir 'luajit/src'
                    }
                }
            }
        }

        luajava(NativeLibrarySpec) {
            targetPlatform 'x64'
            sources {
                c {
                    lib library: 'luajit', linkage: 'static'
                    exportedHeaders {
                        srcDir project(':java').layout.buildDirectory.dir("include")
                        srcDir "${System.properties['java.home']}/include"
                        srcDir "${System.properties['java.home']}/include/linux"
                        srcDir "${System.properties['java.home']}/include/win32"
                        srcDir "${System.properties['java.home']}/include/darwin"
                    }
                    source {
                        srcDir "src/main/c"
                        include "**/*.c"
                    }
                }
            }

            binaries.all {
                checkedBy $.tasks.buildLuaJIT
                def luajit_src = file('luajit/src')
                if (toolChain in VisualCpp) {
                    cppCompiler.define 'WIN64'
                    linker.args "lua51.lib", "/LIBPATH:${luajit_src}"
                } else {
                    linker.args "-lluajit", "-L${luajit_src}"
                }
            }
        }
    }
}

tasks.register('cloneLuajit') {
    group("luajit")
    if (!file('luajit').exists()) {
        exec {
            workingDir '.'
            commandLine 'git', 'clone', 'https://luajit.org/git/luajit.git', 'luajit'
        }
    }
}

tasks.register('buildLuaJIT') {
    dependsOn cloneLuajit
    group("luajit")
    if (IS_WINDOWS) {
        exec {
            workingDir "$layout.projectDirectory"
            commandLine 'powershell', '-Command', '.\\buildLuajit.ps1'
        }
    } else {
        // TODO MACOS
        exec {
            workingDir "luajit"
            commandLine 'make'
        }
    }
}

build {
    doLast {
        copy {
            // linux
            from layout.buildDirectory.file("libs/luajava/shared/libluajava.so")
            from layout.projectDirectory.file("luajit/src/libluajit.so")

            // windows
            from layout.buildDirectory.file("libs/luajava/shared/luajava.dll")
            from layout.projectDirectory.file("luajit/src/lua51.dll")

            into rootProject.layout.buildDirectory.dir("outputs/shared")
        }
    }
}